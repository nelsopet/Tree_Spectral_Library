ggplot(aes(x  = predictor, y = importance)) +
theme_bw() +
geom_bar(stat = "identity") +
coord_flip() +
ggtitle("25 Most Important Varibles (Class_3)")
ggsave("Outputs/VarImp.png")
# Calls the function that will classify image
#source("Functions/LandCoverEstimator.R")
source("Functions/lecospectR.R")
# Calls the function that will classify image
source("Functions/LandCoverEstimator.R")
system.time(PredLayer <- LandCoverEstimator(
filename = "Original_data/Headwall/MSGC_TST_IMG",
out_file = "Output/test/",
#Classif_Model = "Output/E_003_Best_Model_RandomForest_86vars.rda",
Classif_Model = "Outputs/Best_Model_Ranger.rda",
datatype = "raster",
extension = FALSE))
system.time(PredLayer <- LandCoverEstimator(
filename = "Original_data/Headwall/MSGC_TST_IMG",
out_file = "Outputs/test/",
#Classif_Model = "Output/E_003_Best_Model_RandomForest_86vars.rda",
Classif_Model = "Outputs/Best_Model_Ranger.rda",
datatype = "raster",
extension = FALSE))
filename = "Original_data/Headwall/MSGC_TST_IMG"
# Reads in the Hyperspectral datacubes as a Rasterstack raster
Converted_Dcube <- raster::brick(filename)
install.packages("renv")
system.time(PredLayer <- LandCoverEstimator(
#filename = "Original_data/Headwall/MSGC_TST_IMG",
filename = "Original_data/Field_Spec/Maine/Howland_Scans",
out_file = "Outputs/test/",
#Classif_Model = "Output/E_003_Best_Model_RandomForest_86vars.rda",
Classif_Model = "Outputs/Best_Model_Ranger.rda",
datatype = "raster",
extension = FALSE))
install.packages("tidyverse")
install.packages(c("ggplot2", "doParallel"))
install.packages("hsdar")
install.packages("broom")
install.packages("spectrolab")
install.packages(c("caret", "randomForest", "ranger"))
source("./Scripts/1_Field_spec_processing/1A_Howland_scans.R") #PASS
install.packages("spectrolab")
install.packages("shiny")
source("./Scripts/1_Field_spec_processing/1B_PEF_scans.R") #PASS
install.packages("stringi")
source("./Scripts/1_Field_spec_processing/1A_Howland_scans.R") #PASS
source("./Scripts/1_Field_spec_processing/1A_Howland_scans.R") #PASS
source("./Scripts/1_Field_spec_processing/1A_Howland_scans.R") #PASS
source("./Scripts/1_Field_spec_processing/1B_PEF_scans.R") #PASS
install.packages("Polychrome")
source("./Scripts/1_Field_spec_processing/1B_PEF_scans.R") #PASS
install.packages("gplots")
source("./Scripts/1_Field_spec_processing/1B_PEF_scans.R") #PASS
install.packages("OpenImageR")
source("./Scripts/1_Field_spec_processing/2_Clean_Scans.R") #PASS
source("./Scripts/1_Field_spec_processing/1B_PEF_scans.R") #PASS
source("Functions/Scan_Metadata_Reader.R")
####################
path = "Original_data/Field_spec/Maine/PEF_scans_06182019/"
PEF_06182019_spectra <- read_spectra(paste(path), format = "sed")
PEF_06182019_files <- read_files(path)
PEF_06182019_names <- scan_names(PEF_06182019_files)
PEF_06182019_batch <- read_batch(PEF_06182019_files)
# combine into metadata
PEF_06182019_meta <- cbind(PEF_06182019_names, PEF_06182019_batch) %>% as.data.frame()
rownames(PEF_06182019_meta) <- NULL
# set metadata
meta(PEF_06182019_spectra) = data.frame(PEF_06182019_meta, stringsAsFactors = FALSE)
# save spectral object
saveRDS(PEF_06182019_spectra, "Outputs/PEF_06182019_spectra.rds")
####################
path = "Original_data/Field_spec/Maine/PEF_scans_06192019/"
PEF_06192019_spectra <- read_spectra(paste(path), format="sed")
PEF_06192019_files <- read_files(path)
PEF_06192019_names <- scan_names(PEF_06192019_files)
PEF_06192019_batch <- read_batch(PEF_06192019_files)
# combine into metadata
PEF_06192019_meta <- cbind(PEF_06192019_names, PEF_06192019_batch) %>% as.data.frame()
rownames(PEF_06192019_meta) <- NULL
# set metadata
meta(PEF_06192019_spectra) = data.frame(PEF_06192019_meta, stringsAsFactors = FALSE)
# save spectral object
saveRDS(PEF_06192019_spectra, "Outputs/PEF_06192019_spectra.rds")
####################
path = "Original_data/Field_spec/Maine/PEF_scans_07082019/"
PEF_07082019_spectra <- read_spectra(paste(path), format="sed")
PEF_07082019_files <- read_files(path)
PEF_07082019_names <- scan_names(PEF_07082019_files)
PEF_07082019_batch <- read_batch(PEF_07082019_files)
# combine into metadata
PEF_07082019_meta <- cbind(PEF_07082019_names, PEF_07082019_batch) %>% as.data.frame()
rownames(PEF_07082019_meta) <- NULL
# set metadata
meta(PEF_07082019_spectra) = data.frame(PEF_07082019_meta, stringsAsFactors = FALSE)
# save spectral object
saveRDS(PEF_07082019_spectra, "Outputs/PEF_07082019_spectra.rds")
####################
path = "Original_data/Field_spec/Maine/PEF_Scans/"
PEF_spectra <- read_spectra(paste(path), format="sed")
PEF_Scans_files <- read_files(path)
PEF_Scans_names <- scan_names(PEF_Scans_files)
PEF_Scans_batch <- read_batch(PEF_Scans_files)
# combine into metadata
PEF_Scans_meta <- cbind(PEF_Scans_names, PEF_Scans_batch) %>% as.data.frame()
rownames(PEF_Scans_meta) <- NULL
# set metadata
meta(PEF_spectra) = data.frame(PEF_Scans_meta, stringsAsFactors = FALSE)
# save spectral object
saveRDS(PEF_spectra, "Outputs/PEF_spectra.rds")
##############
# combine spectra
tst <- c(PEF_07082019_spectra, PEF_06182019_spectra, PEF_06192019_spectra)
tst <- spectrolab::combine(PEF_07082019_spectra, PEF_06182019_spectra)
PEF_dates_spectra <- spectrolab::combine(tst, PEF_07082019_spectra)
# import file path names of .rds files into character list (spectral libraries based on each location in Alaska)
tst_list <- list.files("Outputs", pattern=".rds", full.names = T)
# reads in the spectral libraries for each location in a list...list of 13 spectral objects
tst_list_of_SpecLib <- lapply(tst_list, readRDS) %>% # reads in the spectral library for each site
setNames(gsub("Outputs/", "", tst_list)) # removes dir path from the name
PEF_dates_spectra <- Reduce(spectrolab::combine, tst_list_of_SpecLib)
tst_list_of_SpecLib
lapply(tst_list, readRDS) %>% # reads in the spectral library for each site
setNames(gsub("Outputs/", "", tst_list))
tst_list
tst_list
##############
# combine spectra
tst <- c(PEF_07082019_spectra, PEF_06182019_spectra, PEF_06192019_spectra)
tst <- spectrolab::combine(PEF_07082019_spectra, PEF_06182019_spectra)
PEF_dates_spectra <- spectrolab::combine(tst, PEF_07082019_spectra)
saveRDS(PEF_dates_spectra, "Outputs/PEF_dates_spectra.rds")
##############
# check to see if the separate PEF folders have the same scans as the full PEF folder
PEF_dates_meta <- rbind(PEF_06192019_meta, PEF_06182019_meta, PEF_07082019_meta) %>% as.data.frame()
#colnames(PEF_dates_meta)
#colnames(PEF_Scans_meta)
PEF_dates_meta %>% dplyr::group_by(`GPS Time`) %>% tally()
PEF_Scans_meta %>% dplyr::group_by(`GPS Time`) %>% tally()
PEF_dates_meta %>%
#anti_join(PEF_Scans_meta, by=c("taxon_code","scan_num","Latitude","Longitude")) %>%
anti_join(PEF_Scans_meta, by=c("File Name")) %>% dim
source("./Scripts/1_Field_spec_processing/1B_PEF_scans.R") #PASS
source("./Scripts/1_Field_spec_processing/2_Clean_Scans.R")
source("./Scripts/1_Field_spec_processing/2_Clean_Scans.R")
source("./Scripts/1_Field_spec_processing/3_MakeDerivatives.R")
install.packages("terra")
source("./Scripts/1_Field_spec_processing/3_MakeDerivatives.R")
install.packages("terra")
install.packages("terra")
source("./Scripts/1_Field_spec_processing/3_MakeDerivatives.R")
install.packages("rgdal")
source("./Scripts/1_Field_spec_processing/3_MakeDerivatives.R")
source("./Scripts/1_Field_spec_processing/Visualizations.R")
Cleaned_Speclib <- read_csv("./Outputs/Cleaned_Tree_SpectralLib.csv")
Cleaned_Speclib_onlyspectra <- Cleaned_Speclib[ ,-1:-32]
Cleaned_Speclib_onlyspectra <- Cleaned_Speclib_onlyspectra %>%
replace(is.na(.), 0)
dist(Cleaned_Speclib_onlyspectra) %>%
hist()
Cleaned_Speclib_onlyspectra_names <- colnames(Cleaned_Speclib_onlyspectra) #%>% as.numeric() %>% as.data.frame() %>% filter(.<1000)
Cleaned_Speclib_meta <- Cleaned_Speclib[ ,1:32]
unique(Cleaned_Speclib_meta$taxon_code) %>%
as.matrix()
Cleaned_Speclib_onlyspectra_vnir <- Cleaned_Speclib_onlyspectra[52:502]
Genus<-c("Abies"
,"Acer"
,"Acer"
,"Alnus"
,"Betula"
,"Betula"
,"Betula"
,"Fagus"
,"Fraxinus"
, "Larix"
, "Picea"
, "Pinus"
, "Populus"
, "Prunus"
, "Quercus"
, "Rhus"
, "Tsuga")
Guild<-c("Conifer"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Conifer"
,"Conifer"
,"Conifer"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Conifer")
Sp_Info <- cbind(Guild, Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
rename(taxon_code = V3)
Sp_Info
View(Sp_Info)
unique(Cleaned_Speclib_meta$taxon_code)
Cleaned_Speclib <- read_csv("./Outputs/Cleaned_Tree_SpectralLib.csv")
Cleaned_Speclib_onlyspectra <- Cleaned_Speclib[ ,-1:-32]
Cleaned_Speclib_onlyspectra <- Cleaned_Speclib_onlyspectra %>%
replace(is.na(.), 0)
dist(Cleaned_Speclib_onlyspectra) %>%
hist()
Cleaned_Speclib_onlyspectra_names <- colnames(Cleaned_Speclib_onlyspectra) #%>% as.numeric() %>% as.data.frame() %>% filter(.<1000)
Cleaned_Speclib_meta <- Cleaned_Speclib[ ,1:32]
unique(Cleaned_Speclib_meta$taxon_code) %>%
as.matrix()
Cleaned_Speclib_onlyspectra_vnir <- Cleaned_Speclib_onlyspectra[52:502]
Genus<-c("Abies"
,"Acer"
,"Acer"
,"Alnus"
,"Betula"
,"Betula"
,"Betula"
,"Fagus"
,"Fraxinus"
, "Larix"
, "Picea"
, "Pinus"
, "Populus"
, "Prunus"
, "Quercus"
, "Rhus"
, "Tsuga")
Guild<-c("Conifer"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Conifer"
,"Conifer"
,"Conifer"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Conifer")
Sp_Info <- cbind(Guild, Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
rename(taxon_code = V3)
fnc_grp1_colors = createPalette(length(unique(Cleaned_Speclib_meta$taxon_code)), c("#ff0000", "#00ff00", "#0000ff")) %>%
as.data.frame() %>%
dplyr::rename(Color = ".") %>%
mutate(Tree_Species = unique(Cleaned_Speclib_meta$taxon_code)) %>%
mutate(ColorNum = seq(1:length(unique(Cleaned_Speclib_meta$taxon_code))));
fnc_grp2_colors = createPalette(length(unique(Sp_Info$Guild)), c("#ff0000")) %>%
as.data.frame() %>%
dplyr::rename(Color_Guild = ".") %>%
mutate(Guild = unique(Sp_Info$Guild)) %>%
mutate(ColorNum = seq(1:length(unique(Sp_Info$Guild))));
fnc_grp3_colors = createPalette(length(unique(Sp_Info$Genus)), c("#ff0000", "#00ff00", "#0000ff")) %>%
as.data.frame() %>%
dplyr::rename(Color_Genus = ".") %>%
mutate(Genus = unique(Sp_Info$Genus)) %>%
mutate(ColorNum = seq(1:length(unique(Sp_Info$Genus))));
fnc_grp1_color_list <- Cleaned_Speclib_meta %>%
dplyr::select(taxon_code) %>%
inner_join(fnc_grp1_colors, by=c("taxon_code"="Tree_Species"), keep=FALSE) %>%
inner_join(Sp_Info, by="taxon_code", keep=FALSE) %>%
inner_join(fnc_grp2_colors, by="Guild") %>%
inner_join(fnc_grp3_colors, by="Genus")
pdf("./Outputs/Tree_Spectral_VNIR_Heatmap.pdf", height = 12, width = 20)
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = fnc_grp1_color_list$Color)
legend(x="topright", legend = unique(fnc_grp1_color_list$taxon_code), fill = unique(fnc_grp1_color_list$Color))
dev.off()
fnc_grp1_color_list
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = fnc_grp1_color_list$Color)
as.matrix(Cleaned_Speclib_onlyspectra_vnir)
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE) #RowSideColors = fnc_grp1_color_list$Color)
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = fnc_grp1_color_list$Color)
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = as.vector(fnc_grp1_color_list$Color))
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = fnc_grp1_color_list$Color_Guild)
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = fnc_grp1_color_list$Color)
fnc_grp1_color_list
as.matrix(Cleaned_Speclib_onlyspectra_vnir)
eh <- as.matrix(Cleaned_Speclib_onlyspectra_vnir)
View(eh)
source("./Scripts/4_Image_prediction/5_Classify_Image1.R")
filename = "Data/test_data"
# Creates the basename for the output filename with extension
basename_F = basename(file_path_sans_ext(filename))
library(tools)
# Creates the basename for the output filename with extension
basename_F = basename(file_path_sans_ext(filename))
basename_F
filename = "Data/test_data/tree_spec_lib_test_raw_14552_rd_rf_or_crop.xml"
# Creates the basename for the output filename with extension
basename_F = basename(file_path_sans_ext(filename))
# Creates the basename for the output filename with no extension
basename_F = basename(filename)
SubFolder<-(paste(out_file,basename_F,sep=""))
# Reads in the Hyperspectral datacubes as a Rasterstack raster
Converted_Dcube <- raster::brick(filename)
# Calls the function that will classify image
#source("./Functions/LandCoverEstimator.R")
#source("./Functions/lecospectR.R")
source("./Functions/treespectR.R")
install.packages("rjson")
install.packages("snow")
install.packages("doSNOW")
install.packages("rasterVis")
input_filepath = "Data/test_data/tree_spec_lib_test_raw_14552_rd_rf_or_crop.xml"
config_path = "./config.json",
cache_filepath = "./",
output_filepath =  paste("output-", format(Sys.time(), "%a-%b-%d-%H-%M-%S-%Y"), ".envi", sep=""),
use_external_bands = TRUE
config_path = "./config.json"
cache_filepath = "./"
output_filepath =  paste("output-", format(Sys.time(), "%a-%b-%d-%H-%M-%S-%Y"), ".envi", sep="")
use_external_bands = TRUE
path <- getwd()
# read in the configuration file
config <- rjson::fromJSON(file = config_path)
# read in the configuration file
config <- rjson::fromJSON(file = config_path)
# read in the configuration file
config <- rjson::fromJSON(file = config_path)
# determine the number of cores to use
num_cores <- parallel::detectCores() - 1 # detect cores on system
parallel::detectCores()
# see if the number of cores to use is specified in the config
if(is.integer(config$clusterCores)){
num_cores <- config$clusterCores
}
is.integer(config$clusterCores)
# set up the parallel cluster
raster::beginCluster(num_cores)
cl <- raster::getCluster()
print(cl)
print(paste0(parallel::detectCores(), " Cores Detected for processing..."))
print(paste0("Cluster initialized with ", num_cores, " processes"))
background_blas_threads <- RhpcBLASctl::get_num_procs()
install.packages("RhpcBLASctl")
background_blas_threads <- RhpcBLASctl::get_num_procs()
background_omp_threads <- RhpcBLASctl::omp_get_max_threads()
background_omp_threads
background_blas_threads
# load the model
model <- load_model(config$model_path)
# load the input datacube and split into tiles
input_raster <- raster::brick(input_filepath)
webshot::install_phantomjs()
Cleaned_Speclib <- read_csv("./Outputs/Cleaned_Tree_SpectralLib.csv")
Cleaned_Speclib_onlyspectra <- Cleaned_Speclib[ ,-1:-32]
Cleaned_Speclib_onlyspectra <- Cleaned_Speclib_onlyspectra %>%
replace(is.na(.), 0)
dist(Cleaned_Speclib_onlyspectra) %>%
hist()
Cleaned_Speclib_onlyspectra_names <- colnames(Cleaned_Speclib_onlyspectra) #%>% as.numeric() %>% as.data.frame() %>% filter(.<1000)
Cleaned_Speclib_meta <- Cleaned_Speclib[ ,1:32]
unique(Cleaned_Speclib_meta$taxon_code) %>%
as.matrix()
Cleaned_Speclib_onlyspectra_vnir <- Cleaned_Speclib_onlyspectra[52:502]
Genus<-c("Abies"
,"Acer"
,"Acer"
,"Alnus"
,"Betula"
,"Betula"
,"Betula"
,"Fagus"
,"Fraxinus"
, "Larix"
, "Picea"
, "Pinus"
, "Populus"
, "Prunus"
, "Quercus"
, "Rhus"
, "Tsuga")
Guild<-c("Conifer"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Conifer"
,"Conifer"
,"Conifer"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Deciduous"
,"Conifer")
Sp_Info <- cbind(Guild, Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
rename(taxon_code = V3)
Guild
Genus
unique(Cleaned_Speclib_meta$taxon_code)
unique(Cleaned_Speclib_meta$taxon_code
Cleaned_Speclib_meta$taxon_code
Cleaned_Speclib_meta$taxon_code
Genus<-c("Abies"
,"Acer"
,"Acer"
,"Alnus"
,"Betula"
,"Betula"
,"Betula"
,"Fagus"
,"Fraxinus"
,"Picea"
,"Pinus"
,"Populus"
,"Quercus"
,"Rhus"
,"Thuja"
,"Tsuga")
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
rename(taxon_code = V3)
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
rename(taxon_code = V2)
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as_tibble() %>%
rename(taxon_code = V2)
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
rename(taxon_code = V2)
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
mutate(Guild = ifelse(Genus == "Abies" |
Genus == "Picea" |
Genus == "Pinus" |
Genus == "Thuja" |
Genus == "Tsuga",
"Coniferous",
"Deciduous")) %>%
rename(taxon_code = V2)
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
mutate(Guild = ifelse(Genus == "Abies" |
Genus == "Picea" |
Genus == "Pinus" |
Genus == "Thuja" |
Genus == "Tsuga",
"Coniferous",
"Deciduous")) %>%
select(Guild, Genus, taxon_code = V2)
cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
mutate(Guild = ifelse(Genus == "Abies" |
Genus == "Picea" |
Genus == "Pinus" |
Genus == "Thuja" |
Genus == "Tsuga",
"Coniferous",
"Deciduous")) %>%
dplyr::select(Guild, Genus, taxon_code = V2)
Sp_Info <- cbind(Genus, unique(Cleaned_Speclib_meta$taxon_code)) %>%
as.data.frame() %>%
mutate(Guild = ifelse(Genus == "Abies" |
Genus == "Picea" |
Genus == "Pinus" |
Genus == "Thuja" |
Genus == "Tsuga",
"Coniferous",
"Deciduous")) %>%
dplyr::select(Guild, Genus, taxon_code = V2)
fnc_grp1_colors = createPalette(length(unique(Cleaned_Speclib_meta$taxon_code)), c("#ff0000", "#00ff00", "#0000ff")) %>%
as.data.frame() %>%
dplyr::rename(Color = ".") %>%
mutate(Tree_Species = unique(Cleaned_Speclib_meta$taxon_code)) %>%
mutate(ColorNum = seq(1:length(unique(Cleaned_Speclib_meta$taxon_code))));
fnc_grp2_colors = createPalette(length(unique(Sp_Info$Guild)), c("#ff0000")) %>%
as.data.frame() %>%
dplyr::rename(Color_Guild = ".") %>%
mutate(Guild = unique(Sp_Info$Guild)) %>%
mutate(ColorNum = seq(1:length(unique(Sp_Info$Guild))));
fnc_grp3_colors = createPalette(length(unique(Sp_Info$Genus)), c("#ff0000", "#00ff00", "#0000ff")) %>%
as.data.frame() %>%
dplyr::rename(Color_Genus = ".") %>%
mutate(Genus = unique(Sp_Info$Genus)) %>%
mutate(ColorNum = seq(1:length(unique(Sp_Info$Genus))));
fnc_grp1_color_list <- Cleaned_Speclib_meta %>%
dplyr::select(taxon_code) %>%
inner_join(fnc_grp1_colors, by=c("taxon_code"="Tree_Species"), keep=FALSE) %>%
inner_join(Sp_Info, by="taxon_code", keep=FALSE) %>%
inner_join(fnc_grp2_colors, by="Guild") %>%
inner_join(fnc_grp3_colors, by="Genus")
heatmap.2(as.matrix(Cleaned_Speclib_onlyspectra_vnir), dendrogram = "row", trace = "none",
Colv = FALSE, RowSideColors = fnc_grp1_color_list$Color)
source("./Scripts/1_Field_spec_processing/Visualizations.R") #Does not produce heat maps
source("./Scripts/4_Image_prediction/5_Classify_Image1.R")
source("./Scripts/4_Image_prediction/5_Classify_Image1.R")
